'use client';

import React from 'react';
import { 
  UniversalModal, 
  useUniversalModal, 
  UserForm,
  RoomForm,
  createUserValidator,
  createRoomValidator
} from '../../components';
import { UserFormData } from '../../types/User';
import { RoomFormData } from '../../types/Room';

const UniversalModalDemo: React.FC = () => {
  // –ú–æ–¥–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const userModal = useUniversalModal('user', {
    login: '',
    fullName: '',
    email: '',
    password: '',
    phone: '',
    parentPhone: '',
    birthday: '',
    role: 1,
    organizationId: ''
  });

  // –ú–æ–¥–∞–ª –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–æ–≤
  const roomModal = useUniversalModal('room', {
    name: '',
    capacity: 0,
    description: ''
  });

  const handleSaveUser = async (userData: UserFormData, userId?: string) => {
    console.log('Saving user:', userData, userId);
    // –ó–¥–µ—Å—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    alert(`${userId ? '–û–±–Ω–æ–≤–ª–µ–Ω' : '–°–æ–∑–¥–∞–Ω'} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.fullName}`);
  };

  const handleSaveRoom = async (roomData: RoomFormData, roomId?: string) => {
    console.log('Saving room:', roomData, roomId);
    // –ó–¥–µ—Å—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞
    alert(`${roomId ? '–û–±–Ω–æ–≤–ª–µ–Ω' : '–°–æ–∑–¥–∞–Ω'} –∫–∞–±–∏–Ω–µ—Ç: ${roomData.name}`);
  };

  // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const sampleUser = {
    id: '1',
    login: 'testuser',
    fullName: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    email: 'test@example.com',
    password: '', // For edit mode, password can be empty
    phone: '+7 (999) 123-45-67',
    parentPhone: '+7 (999) 765-43-21',
    birthday: '2000-01-01',
    role: 1,
    organizationId: '1'
  };

  const sampleRoom = {
    id: '1',
    name: '–ö–∞–±–∏–Ω–µ—Ç 101',
    capacity: 30,
    description: '–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –ª–µ–∫—Ü–∏–π'
  };

  const userConfig = userModal.getConfig();
  const roomConfig = roomModal.getConfig();

  return (
    <div className="p-6 max-w-4xl mx-auto">
      <h1 className="text-3xl font-bold mb-8 text-center">
        üéØ –î–µ–º–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–¥–∞–ª–æ–≤
      </h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ */}
        <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg">
          <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">
            üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
          </h2>
          <div className="space-y-3">
            <button
              onClick={userModal.openCreateModal}
              className="w-full px-4 py-2 bg-gradient-to-r from-emerald-500 to-lime-600 text-white rounded-lg hover:opacity-90 transition-opacity"
            >
              –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            </button>
            <button
              onClick={() => userModal.openEditModal(sampleUser)}
              className="w-full px-4 py-2 bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-lg hover:opacity-90 transition-opacity"
            >
              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            </button>
          </div>
        </div>

        {/* –ö–∞–±–∏–Ω–µ—Ç—ã */}
        <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg">
          <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">
            üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏
          </h2>
          <div className="space-y-3">
            <button
              onClick={roomModal.openCreateModal}
              className="w-full px-4 py-2 bg-gradient-to-r from-purple-500 to-pink-600 text-white rounded-lg hover:opacity-90 transition-opacity"
            >
              –°–æ–∑–¥–∞—Ç—å –∫–∞–±–∏–Ω–µ—Ç
            </button>
            <button
              onClick={() => roomModal.openEditModal(sampleRoom)}
              className="w-full px-4 py-2 bg-gradient-to-r from-purple-500 to-pink-600 text-white rounded-lg hover:opacity-90 transition-opacity"
            >
              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç
            </button>
          </div>
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ */}
      <div className="mt-8 bg-gray-50 dark:bg-gray-700 p-6 rounded-xl">
        <h3 className="text-lg font-semibold mb-3 text-gray-900 dark:text-white">
          ‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:
        </h3>
        <ul className="space-y-2 text-gray-700 dark:text-gray-300">
          <li>üé® <strong>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã</strong> –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–∏</li>
          <li>üìù <strong>–ì–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º—ã</strong> —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π</li>
          <li>üîÑ <strong>–û–¥–∏–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</strong> –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</li>
          <li>‚ö° <strong>–õ–µ–≥–∫–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ</strong> –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤</li>
          <li>üõ°Ô∏è <strong>TypeScript –ø–æ–¥–¥–µ—Ä–∂–∫–∞</strong> –∏–∑ –∫–æ—Ä–æ–±–∫–∏</li>
        </ul>
      </div>

      {/* –ú–æ–¥–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
      <UniversalModal
        isOpen={userModal.isOpen}
        onClose={userModal.closeModal}
        mode={userModal.mode}
        title={userConfig.title}
        subtitle={userConfig.subtitle}
        icon={userConfig.icon}
        gradientFrom={userConfig.gradientFrom}
        gradientTo={userConfig.gradientTo}
        initialData={userModal.initialData}
        data={userModal.editData}
        onSave={handleSaveUser}
        validate={createUserValidator}
        submitText={userConfig.submitText}
        loadingText={userConfig.loadingText}
      >
        {(props) => <UserForm {...props} />}
      </UniversalModal>

      {/* –ú–æ–¥–∞–ª –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–æ–≤ */}
      <UniversalModal
        isOpen={roomModal.isOpen}
        onClose={roomModal.closeModal}
        mode={roomModal.mode}
        title={roomConfig.title}
        subtitle={roomConfig.subtitle}
        icon={roomConfig.icon}
        gradientFrom={roomConfig.gradientFrom}
        gradientTo={roomConfig.gradientTo}
        initialData={roomModal.initialData}
        data={roomModal.editData}
        onSave={handleSaveRoom}
        validate={createRoomValidator}
        submitText={roomConfig.submitText}
        loadingText={roomConfig.loadingText}
        maxWidth="lg"
      >
        {(props) => <RoomForm {...props} />}
      </UniversalModal>
    </div>
  );
};

export default UniversalModalDemo;